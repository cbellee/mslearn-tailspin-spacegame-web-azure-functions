trigger:
  branches:
    include:
      - master

variables:
  BUILD_CONFIGURATION: 'Release'
  AZURE_SUBSCRIPTION_CXN: 'Azure_CXP_FTA_CBELLEE_Cxn'
  LOCATION: 'australiaeast'
  SUFFIX: 6340
  WEB_APP_NAME: 'tailspin-space-game-web-$(SUFFIX)'
  FUNCTION_APP_NAME: 'tailspin-space-game-leaderboard-$(SUFFIX)'
  STORAGE_NAME: 'tailspinspacegame$(SUFFIX)'
  RG_NAME: 'tailspin-space-game-rg'
  ASP_NAME: 'tailspin-space-game-asp'
  ASP_SKU: 'B1'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(BUILD_CONFIGURATION)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(BUILD_CONFIGURATION)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(BUILD_CONFIGURATION)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(BUILD_CONFIGURATION) --output $(Build.ArtifactStagingDirectory)/$(BUILD_CONFIGURATION)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'DeployInfrastructure'
  displayName: 'DeployInfrastructure'
  jobs:
  - deployment: DeployInfrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    environment: spike
    #variables:
    #- group: Release
    strategy:
      runOnce:
        deploy:
          steps: 
          - task: AzureCLI@2
            displayName: deployinfrastructure
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION_CXN)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az configure --defaults location=$(LOCATION)
                az group create --name $(RG_NAME)

                az appservice plan create \
                  --name $(ASP_NAME) \
                  --resource-group $(RG_NAME) \
                  --sku $(ASP_SKU)

                az webapp create \
                  --name $(WEB_APP_NAME) \
                  --resource-group $(RG_NAME) \
                  --plan $(ASP_NAME) 
                
                az storage account create \
                  --name $(STORAGE_NAME) \
                  --resource-group $(RG_NAME) \
                  --sku Standard_LRS

                az functionapp create \
                  --name $(FUNCTION_APP_NAME) \
                  --resource-group $(RG_NAME) \
                  --storage-account $(STORAGE_NAME) \
                  --functions-version 3 \
                  --consumption-plan-location $(LOCATION)

                az webapp list \
                  --resource-group $(RG_NAME) \
                  --query "[].{hostName: defaultHostName, state: state}" \
                  --output table

                az functionapp list \
                  --resource-group $(RG_NAME) \
                  --query "[].{hostName: defaultHostName, state: state}" \
                  --output table

- stage: 'Deploy'
  displayName: 'Deploy the web application'
  dependsOn: 'DeployInfrastructure'
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: spike
    #variables:
    #- group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION_CXN)
              appName: '$(WEB_APP_NAME)'
              appType: webAppLinux
              package: '$(Pipeline.Workspace)/drop/$(BUILD_CONFIGURATION)/Tailspin.SpaceGame.Web.zip'

          - task: AzureFunctionApp@1
            displayName: 'Azure Function Deploy: leaderboard'
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION_CXN)
              appType: functionAppLinux
              appName: $(FUNCTION_APP_NAME)
              package: '$(Pipeline.Workspace)/drop/$(BUILD_CONFIGURATION)/Tailspin.SpaceGame.LeaderboardFunction.zip'
              runtimeStack: DOCKER|microsoft/azure-functions-dotnet-core3.0:3.0
              startUpCommand: 'func azure functionapp publish $(FUNCTION_APP_NAME) --no-bundler'

          - task: AzureAppServiceSettings@1
            displayName: 'Update web app settings'
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION_CXN)
              appName: $(WEBAPP_NAME)
              resourceGroupName: $(RG_NAME)
              appSettings: |
                [
                  {
                    "name": "AppSettings:LeaderboardFunctionUrl",
                    "value": "http://$(FUNCTION_APP_NAME).azurewebsites.net/api/LeaderboardFunction",
                    "slotSetting": false
                  }
                ]